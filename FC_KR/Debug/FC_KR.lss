
FC_KR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000124  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005e7  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d5  00000000  00000000  00000807  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000295  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000174  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004a3  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  0000131b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 89 00 	call	0x112	; 0x112 <main>
  7a:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <PT2>:
	 }
	 PORTC=0x00;
} 

void PT2()//This is the bouncing from one end to the other pattern, a variation of the first pattern
{
  82:	80 e6       	ldi	r24, 0x60	; 96
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	28 e6       	ldi	r18, 0x68	; 104
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	fc 01       	movw	r30, r24
	double var=50;
	int j=7;
	int k=7;
	for(int i=0;i<8;i++)
	{
		PORTA=pt1[i];
  8c:	41 91       	ld	r20, Z+
  8e:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	4f ef       	ldi	r20, 0xFF	; 255
  92:	50 e7       	ldi	r21, 0x70	; 112
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	41 50       	subi	r20, 0x01	; 1
  98:	50 40       	sbci	r21, 0x00	; 0
  9a:	60 40       	sbci	r22, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <PT2+0x14>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <PT2+0x1e>
  a0:	00 00       	nop
void PT2()//This is the bouncing from one end to the other pattern, a variation of the first pattern
{
	double var=50;
	int j=7;
	int k=7;
	for(int i=0;i<8;i++)
  a2:	e2 17       	cp	r30, r18
  a4:	f3 07       	cpc	r31, r19
  a6:	91 f7       	brne	.-28     	; 0x8c <PT2+0xa>
	{
		PORTA=pt1[i];
		_delay_ms(var);
	}
	PORTA=0x00;
  a8:	1b ba       	out	0x1b, r1	; 27
  aa:	e8 e6       	ldi	r30, 0x68	; 104
  ac:	f0 e0       	ldi	r31, 0x00	; 0
	while(j>=0)
	{
		PORTC=pt1[j];
  ae:	42 91       	ld	r20, -Z
  b0:	45 bb       	out	0x15, r20	; 21
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	50 e7       	ldi	r21, 0x70	; 112
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	41 50       	subi	r20, 0x01	; 1
  ba:	50 40       	sbci	r21, 0x00	; 0
  bc:	60 40       	sbci	r22, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <PT2+0x36>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <PT2+0x40>
  c2:	00 00       	nop
	{
		PORTA=pt1[i];
		_delay_ms(var);
	}
	PORTA=0x00;
	while(j>=0)
  c4:	8e 17       	cp	r24, r30
  c6:	9f 07       	cpc	r25, r31
  c8:	91 f7       	brne	.-28     	; 0xae <PT2+0x2c>
	{
		PORTC=pt1[j];
		_delay_ms(var);
		j--;
	}
	PORTC=0x00;
  ca:	15 ba       	out	0x15, r1	; 21
  cc:	e0 e6       	ldi	r30, 0x60	; 96
  ce:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(int i=0;i<8;i++)
	{
		PORTC=pt1[i];
  d0:	41 91       	ld	r20, Z+
  d2:	45 bb       	out	0x15, r20	; 21
  d4:	4f ef       	ldi	r20, 0xFF	; 255
  d6:	50 e7       	ldi	r21, 0x70	; 112
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	41 50       	subi	r20, 0x01	; 1
  dc:	50 40       	sbci	r21, 0x00	; 0
  de:	60 40       	sbci	r22, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <PT2+0x58>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <PT2+0x62>
  e4:	00 00       	nop
		_delay_ms(var);
		j--;
	}
	PORTC=0x00;
	
	for(int i=0;i<8;i++)
  e6:	2e 17       	cp	r18, r30
  e8:	3f 07       	cpc	r19, r31
  ea:	91 f7       	brne	.-28     	; 0xd0 <PT2+0x4e>
	{
		PORTC=pt1[i];
		_delay_ms(var);
	}
	PORTC=0x00;
  ec:	15 ba       	out	0x15, r1	; 21
  ee:	e8 e6       	ldi	r30, 0x68	; 104
  f0:	f0 e0       	ldi	r31, 0x00	; 0
	while(k>=0)
	{
		PORTA=pt1[k];
  f2:	22 91       	ld	r18, -Z
  f4:	2b bb       	out	0x1b, r18	; 27
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	30 e7       	ldi	r19, 0x70	; 112
  fa:	42 e0       	ldi	r20, 0x02	; 2
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	40 40       	sbci	r20, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <PT2+0x7a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <PT2+0x84>
 106:	00 00       	nop
	{
		PORTC=pt1[i];
		_delay_ms(var);
	}
	PORTC=0x00;
	while(k>=0)
 108:	e8 17       	cp	r30, r24
 10a:	f9 07       	cpc	r31, r25
 10c:	91 f7       	brne	.-28     	; 0xf2 <PT2+0x70>
	{
		PORTA=pt1[k];
		_delay_ms(var);
		k--;
	}
	PORTA=0x00;
 10e:	1b ba       	out	0x1b, r1	; 27
 110:	08 95       	ret

00000112 <main>:
}


int main(void)
{
	DDRC=0xff;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	84 bb       	out	0x14, r24	; 20
	DDRA=0xff;
 116:	8a bb       	out	0x1a, r24	; 26
	DDRD=0x00;//This makes last pin of PORTD an input
 118:	11 ba       	out	0x11, r1	; 17

	
while(1)
{
	PT2();
 11a:	0e 94 41 00 	call	0x82	; 0x82 <PT2>
 11e:	fd cf       	rjmp	.-6      	; 0x11a <main+0x8>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
